function Get-ADOField
{
    <#
    .Synopsis
    
    .Description

    .Link
        https://docs.microsoft.com/en-us/rest/api/azure/devops/wit/fields/list?view=azure-devops-rest-5.1       
    #>
    param(
    # The Organization
    [Parameter(Mandatory,ValueFromPipelineByPropertyName)]
    [Alias('Org')]
    [string]
    $Organization,

    # The Project
    [Parameter(Mandatory,ValueFromPipelineByPropertyName)]
    [string]
    $Project,

    # The server.  By default https://dev.azure.com/.
    # To use against TFS, provide the tfs server URL (e.g. http://tfsserver:8080/tfs).
    [Parameter(ValueFromPipelineByPropertyName)]
    [uri]
    $Server = "https://dev.azure.com/",

    # If set, will force a refresh of the cached results.
    [Alias('Refresh')]
    [switch]
    $Force,

    # The api version.  By default, 5.1.
    # If targeting TFS, this will need to change to match your server version.
    # See: https://docs.microsoft.com/en-us/azure/devops/integrate/concepts/rest-api-versioning?view=azure-devops
    [string]
    $ApiVersion = "5.1",

    # A Personal Access Token
    [Alias('PAT')]
    [string]
    $PersonalAccessToken,

    # Specifies a user account that has permission to send the request. The default is the current user.
    # Type a user name, such as User01 or Domain01\User01, or enter a PSCredential object, such as one generated by the Get-Credential cmdlet.
    [pscredential]
    [Management.Automation.CredentialAttribute()]
    $Credential,

    # Indicates that the cmdlet uses the credentials of the current user to send the web request.
    [Alias('UseDefaultCredential')]
    [switch]
    $UseDefaultCredentials,

    # Specifies that the cmdlet uses a proxy server for the request, rather than connecting directly to the Internet resource. Enter the URI of a network proxy server.
    [uri]
    $Proxy,

    # Specifies a user account that has permission to use the proxy server that is specified by the Proxy parameter. The default is the current user.
    # Type a user name, such as "User01" or "Domain01\User01", or enter a PSCredential object, such as one generated by the Get-Credential cmdlet.
    # This parameter is valid only when the Proxy parameter is also used in the command. You cannot use the ProxyCredential and ProxyUseDefaultCredentials parameters in the same command.
    [pscredential]
    [Management.Automation.CredentialAttribute()]
    $ProxyCredential,

    # Indicates that the cmdlet uses the credentials of the current user to access the proxy server that is specified by the Proxy parameter.
    # This parameter is valid only when the Proxy parameter is also used in the command. You cannot use the ProxyCredential and ProxyUseDefaultCredentials parameters in the same command.
    [switch]
    $ProxyUseDefaultCredentials
    )

    begin {
        $invokeRestApi = [Management.Automation.CommandMetaData]$ExecutionContext.SessionState.InvokeCommand.GetCommand('Invoke-ADORestAPI', 'Function')
        #region Copy Invoke-ADORestAPI parameters
        $invokeParams = @{} + $PSBoundParameters
        foreach ($k in @($invokeParams.Keys)) {
            if (-not $invokeRestApi.Parameters.ContainsKey($k)) {
                $invokeParams.Remove($k)
            }
        }
        #endregion Copy Invoke-ADORestAPI parameters

        if (-not $Script:ADOFieldCache) {
            $Script:ADOFieldCache = @{}
        }
    }

    process {
        $uriBase = "$Server".TrimEnd('/'), $Organization, $Project -join '/'
        $uri = $uriBase, "_apis/wit/fields?" -join '/'
        if ($ApiVersion) {
            $uri += "api-version=$ApiVersion"
        }
        $invokeParams.Uri = $uri
        if ($Force) {
            $Script:ADOFieldCache.Remove($uriBase)
        }

        if (-not $Script:ADOFieldCache.$uriBase) {
            Write-Verbose "Caching ADO Fields for $uriBase"
            $Script:ADOFieldCache.$uriBase =
                Invoke-ADORestAPI @invokeParams -PSTypeName "$Organization.$Project.Field", "PSDevOps.Field"
        }

        $Script:ADOFieldCache.$uriBase
    }
}