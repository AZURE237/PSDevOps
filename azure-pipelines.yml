
stages: 
  - stage: TestPowerShellCrossPlatform
    displayName: Test
    jobs: 
      - job: Windows
        displayName: on Windows
        pool: 
          vmImage: vs2017-win2016
        steps: 
          - powershell: |
              Install-Module -Name Pester -Repository PSGallery -Force -Scope CurrentUser
              Import-Module Pester -Force -PassThru
            displayName: InstallPester
          - powershell: |
              $orgName, $moduleName = $env:BUILD_REPOSITORY_ID -split "/"
              Import-Module ".\$moduleName.psd1" -Force -PassThru | Out-Host
              $result = 
                  Invoke-Pester -PassThru -Verbose -OutputFile ".\$moduleName.TestResults.xml" -OutputFormat NUnitXml `
                      -CodeCoverage "$(Build.SourcesDirectory)\*-*.ps1" -CodeCoverageOutputFile ".\$moduleName.Coverage.xml"
              if ($result.FailedCount -gt 0) {
                  throw "$($result.FailedCount) tests failed."
              }
            displayName: RunPester
          - task: PublishTestResults@2
            inputs: 
              testResultsFormat: NUnit
              testResultsFiles: "**/*.TestResults.xml"
              mergeTestResults: true
          - task: PublishCodeCoverageResults@1
            inputs: 
              codeCoverageTool: JaCoCo
              summaryFileLocation: "**/*.Coverage.xml"
              reportDirectory: $(System.DefaultWorkingDirectory)
      - job: Linux
        displayName: on Linux
        pool: 
          vmImage: ubuntu-16.04
        steps: 
          - script: |
              
              curl https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -
              curl https://packages.microsoft.com/config/ubuntu/16.04/prod.list | sudo tee /etc/apt/sources.list.d/microsoft.list
              sudo apt-get update
              sudo apt-get install -y powershell
                  
            displayName: Install PowerShell Core
          - pwsh: |
              Install-Module -Name Pester -Repository PSGallery -Force -Scope CurrentUser
              Import-Module Pester -Force -PassThru
            displayName: InstallPester
          - pwsh: |
              $orgName, $moduleName = $env:BUILD_REPOSITORY_ID -split "/"
              Import-Module ".\$moduleName.psd1" -Force -PassThru | Out-Host
              $result = 
                  Invoke-Pester -PassThru -Verbose -OutputFile ".\$moduleName.TestResults.xml" -OutputFormat NUnitXml `
                      -CodeCoverage "$(Build.SourcesDirectory)\*-*.ps1" -CodeCoverageOutputFile ".\$moduleName.Coverage.xml"
              if ($result.FailedCount -gt 0) {
                  throw "$($result.FailedCount) tests failed."
              }
            displayName: RunPester
          - task: PublishTestResults@2
            inputs: 
              testResultsFormat: NUnit
              testResultsFiles: "**/*.TestResults.xml"
              mergeTestResults: true
          - task: PublishCodeCoverageResults@1
            inputs: 
              codeCoverageTool: JaCoCo
              summaryFileLocation: "**/*.Coverage.xml"
              reportDirectory: $(System.DefaultWorkingDirectory)
      - job: MacOS
        displayName: on MacOS
        pool: 
          vmImage: xcode9-macos10.13
        steps: 
          - script: |
              brew update
              brew tap caskroom/cask
              brew cask install powershell
            displayName: Install PowerShell Core
          - pwsh: |
              Install-Module -Name Pester -Repository PSGallery -Force -Scope CurrentUser
              Import-Module Pester -Force -PassThru
            displayName: InstallPester
          - pwsh: |
              $orgName, $moduleName = $env:BUILD_REPOSITORY_ID -split "/"
              Import-Module ".\$moduleName.psd1" -Force -PassThru | Out-Host
              $result = 
                  Invoke-Pester -PassThru -Verbose -OutputFile ".\$moduleName.TestResults.xml" -OutputFormat NUnitXml `
                      -CodeCoverage "$(Build.SourcesDirectory)\*-*.ps1" -CodeCoverageOutputFile ".\$moduleName.Coverage.xml"
              if ($result.FailedCount -gt 0) {
                  throw "$($result.FailedCount) tests failed."
              }
            displayName: RunPester
          - task: PublishTestResults@2
            inputs: 
              testResultsFormat: NUnit
              testResultsFiles: "**/*.TestResults.xml"
              mergeTestResults: true
          - task: PublishCodeCoverageResults@1
            inputs: 
              codeCoverageTool: JaCoCo
              summaryFileLocation: "**/*.Coverage.xml"
              reportDirectory: $(System.DefaultWorkingDirectory)


